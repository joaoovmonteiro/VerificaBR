{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ValidaBR - Brazilian Document Validation Platform\n\n## Overview\n\nValidaBR is a comprehensive web application that provides professional validation tools for Brazilian documents and contact information. The platform offers real-time validation for CPF, CNPJ, phone numbers, postal codes (CEP), and email addresses. Built as a single-page application, it features a clean, responsive interface with stateless validation operations that don't require persistent data storage.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**React Single-Page Application**: The frontend is built using React 18 with TypeScript, utilizing a modern component-based architecture. The application uses Wouter for lightweight client-side routing and TanStack Query for server state management and caching.\n\n**Component Structure**: The UI follows a modular design with shadcn/ui components providing a consistent design system. Components are organized into layout components (Header, Footer), validation tools (CPF/CNPJ, Phone, CEP, Email validators), and reusable UI components. The application uses a card-based interface where users can select validation tools from a main dashboard.\n\n**Styling System**: Tailwind CSS provides utility-first styling with a custom configuration supporting dark mode and CSS variables for theming. The design system uses a \"new-york\" style from shadcn/ui with neutral base colors and custom color schemes for different validation tools.\n\n**State Management**: React hooks manage local component state, while TanStack Query handles server state, caching, and API interactions. The validation operations are stateless, with results displayed immediately after API responses.\n\n### Backend Architecture\n\n**Express.js API Server**: The backend is a REST API built with Express.js and TypeScript, following a clean separation of concerns. The server provides validation endpoints for each document type and handles CORS, request logging, and error handling middleware.\n\n**Service Layer Pattern**: Business logic is encapsulated in service classes (DocumentValidator, PhoneValidator, CepValidator, EmailValidator) that contain the validation algorithms. This separation allows for easy testing and maintenance of validation logic.\n\n**Request/Response Validation**: Zod schemas define and validate API request and response structures, ensuring type safety and proper data validation across the client-server boundary.\n\n**Development Setup**: The application uses Vite for development with hot module replacement, and esbuild for production builds. Development and production environments are handled through environment-specific configurations.\n\n### Data Storage Solutions\n\n**Stateless Architecture**: The application operates without persistent data storage, as all validation operations are stateless and computed in real-time. An in-memory storage interface is defined but not utilized, maintaining clean architecture principles.\n\n**Session Management**: Basic session handling is configured through connect-pg-simple, though current validation operations don't require user sessions or persistent state.\n\n### Authentication and Authorization\n\n**No Authentication Required**: The validation platform operates as a public service without user authentication. All validation endpoints are publicly accessible, aligning with the tool's purpose as a free validation service.\n\n### Validation Logic Implementation\n\n**CPF/CNPJ Validation**: Implements official Brazilian tax document validation algorithms using digit verification formulas. Handles both individual (CPF) and corporate (CNPJ) documents with proper formatting and invalid sequence detection.\n\n**Phone Validation**: Supports Brazilian phone number validation with area code verification, carrier detection, and formatting. Includes support for mobile, landline, and special service numbers.\n\n**CEP Validation**: Integrates with external postal code APIs (Correios and ViaCEP) to provide address lookup functionality with comprehensive location data including street, neighborhood, city, and state information.\n\n**Email Validation**: Performs multi-layer email validation including syntax checking, domain validation, MX record verification, disposable email detection, and role-based email identification.\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework for building the user interface\n- **Express.js**: Backend web framework for API server\n- **TypeScript**: Type-safe development across frontend and backend\n- **Node.js**: Runtime environment for the backend server\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe SQL query builder and ORM\n- **PostgreSQL**: Configured as the primary database (via @neondatabase/serverless)\n- **Neon Database**: Serverless PostgreSQL hosting service\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Low-level UI primitives for accessibility and customization\n- **Lucide React**: Icon library for consistent iconography\n- **Font Awesome**: Icon library for additional visual elements\n\n### State Management and API\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight client-side routing\n- **React Hook Form**: Form state management and validation\n- **Zod**: Schema validation for API requests and responses\n\n### Development and Build Tools\n- **Vite**: Frontend build tool and development server\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing and optimization\n- **Autoprefixer**: CSS vendor prefixing\n\n### External APIs and Services\n- **ViaCEP API**: Brazilian postal code lookup service\n- **Correios API**: Official Brazilian postal service API\n- **DNS Resolution Services**: For email domain and MX record validation\n\n### Development and Runtime\n- **tsx**: TypeScript execution environment for development\n- **nanoid**: Unique identifier generation\n- **date-fns**: Date utility library for formatting and manipulation\n\nThe application is designed to be deployed on platforms like Replit with environment variable configuration for database connections and external API integrations.\n\n## Recent Changes\n\n### Latest Modifications with Dates\n\n**Janeiro 2025 - Implementação de Rotas Individuais e SEO**\n- Criado rotas específicas para cada validador (/cpf-cnpj, /telefone, /cep, /email)\n- Implementado menu dropdown no header com navegação para cada ferramenta\n- Adicionado páginas individuais com conteúdo SEO otimizado para cada validador\n- Criado seção \"Sobre\" expansiva na home page com detalhes técnicos\n- Adicionado seção de contato completa\n- Implementado menu mobile responsivo\n- Melhorado meta tags para SEO (title e description)\n- Atualizado componentes para usar navegação por rotas ao invés de estado local\n\n### Architecture Updates\n\n**Multi-Route System**: Transformado de single-page application para multi-route system com:\n- Rotas dedicadas para cada validador permitindo acesso direto via URL\n- Melhor indexação pelos motores de busca\n- URLs amigáveis para compartilhamento\n- Navegação intuitiva através de dropdown menu\n\n**SEO Optimization**: Cada página de validador contém:\n- Conteúdo detalhado sobre o funcionamento da validação específica\n- Meta tags otimizadas para cada ferramenta\n- Estrutura semântica melhorada\n- Informações técnicas e educativas\n\n**Enhanced User Experience**:\n- Menu dropdown responsivo com ícones\n- Seções informativas expandidas\n- Placeholders para monetização com AdSense\n- Design mobile-first mantido","size_bytes":7687},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { \n  cpfCnpjValidationRequestSchema,\n  phoneValidationRequestSchema,\n  cepValidationRequestSchema,\n  emailValidationRequestSchema,\n  fileConversionRequestSchema\n} from \"@shared/schema\";\nimport { DocumentValidator, PhoneValidator, CepValidator, EmailValidator } from \"./services/validators\";\nimport { fileConverter } from \"./services/file-converter\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow common file types\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'image/jpeg',\n      'image/jpg',\n      'image/png',\n      'image/gif',\n      'image/bmp',\n      'image/tiff',\n      'image/webp'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Tipo de arquivo não suportado'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // CPF/CNPJ Validation endpoint\n  app.post(\"/api/validate/cpf-cnpj\", async (req, res) => {\n    try {\n      const validatedData = cpfCnpjValidationRequestSchema.parse(req.body);\n      const result = DocumentValidator.validateCpfCnpj(validatedData.document);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        valid: false,\n        document: req.body.document || '',\n        formattedDocument: req.body.document || '',\n        type: \"CPF\",\n        message: \"Dados de entrada inválidos\"\n      });\n    }\n  });\n\n  // Phone Validation endpoint\n  app.post(\"/api/validate/phone\", async (req, res) => {\n    try {\n      const validatedData = phoneValidationRequestSchema.parse(req.body);\n      const result = PhoneValidator.validatePhone(validatedData.phone, validatedData.type);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        valid: false,\n        phone: req.body.phone || '',\n        formattedPhone: req.body.phone || '',\n        type: 'Celular',\n        message: \"Dados de entrada inválidos\"\n      });\n    }\n  });\n\n  // CEP Validation endpoint\n  app.post(\"/api/validate/cep\", async (req, res) => {\n    try {\n      const validatedData = cepValidationRequestSchema.parse(req.body);\n      const result = await CepValidator.validateCep(validatedData.cep);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        valid: false,\n        cep: req.body.cep || '',\n        formattedCep: req.body.cep || '',\n        message: \"Dados de entrada inválidos\"\n      });\n    }\n  });\n\n  // Email Validation endpoint\n  app.post(\"/api/validate/email\", async (req, res) => {\n    try {\n      const validatedData = emailValidationRequestSchema.parse(req.body);\n      const result = await EmailValidator.validateEmail(validatedData.email);\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        valid: false,\n        email: req.body.email || '',\n        result: 'unknown',\n        reason: 'exception',\n        message: \"Dados de entrada inválidos\",\n        checks: {\n          syntax: false,\n          domain: false,\n          mx: false,\n          smtp: false,\n          disposable: false,\n          roleBase: false,\n          catchAll: false,\n        }\n      });\n    }\n  });\n\n  // File Conversion endpoint\n  app.post(\"/api/convert\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({\n          success: false,\n          error: \"Nenhum arquivo foi enviado\"\n        });\n      }\n\n      const { type } = req.body;\n      const validatedType = fileConversionRequestSchema.parse({ type });\n      \n      let result;\n      \n      switch (validatedType.type) {\n        case 'word-to-pdf':\n          result = await fileConverter.convertWordToPdf(req.file.buffer, req.file.originalname);\n          break;\n        case 'pdf-to-word':\n          result = await fileConverter.convertPdfToWord(req.file.buffer, req.file.originalname);\n          break;\n        case 'image-converter':\n          // For image conversion, you could add target format from form data\n          const targetFormat = req.body.targetFormat || 'jpg';\n          result = await fileConverter.convertImage(req.file.buffer, req.file.originalname, targetFormat);\n          break;\n        default:\n          return res.status(400).json({\n            success: false,\n            error: \"Tipo de conversão não suportado\"\n          });\n      }\n      \n      res.json(result);\n    } catch (error) {\n      console.error('Conversion error:', error);\n      res.status(500).json({\n        success: false,\n        error: \"Erro interno do servidor\"\n      });\n    }\n  });\n\n  // File Download endpoint\n  app.get(\"/api/download/:filename\", async (req, res) => {\n    try {\n      const { filename } = req.params;\n      \n      // Validate filename to prevent path traversal\n      if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n        return res.status(400).json({\n          success: false,\n          error: \"Nome de arquivo inválido\"\n        });\n      }\n      \n      const fileBuffer = await fileConverter.getFile(filename);\n      \n      if (!fileBuffer) {\n        return res.status(404).json({\n          success: false,\n          error: \"Arquivo não encontrado\"\n        });\n      }\n      \n      // Set appropriate headers for file download\n      const extension = filename.split('.').pop()?.toLowerCase();\n      let contentType = 'application/octet-stream';\n      \n      switch (extension) {\n        case 'pdf':\n          contentType = 'application/pdf';\n          break;\n        case 'docx':\n          contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n          break;\n        case 'doc':\n          contentType = 'application/msword';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          contentType = 'image/jpeg';\n          break;\n        case 'png':\n          contentType = 'image/png';\n          break;\n        case 'gif':\n          contentType = 'image/gif';\n          break;\n        case 'webp':\n          contentType = 'image/webp';\n          break;\n      }\n      \n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(fileBuffer);\n    } catch (error) {\n      console.error('Download error:', error);\n      res.status(500).json({\n        success: false,\n        error: \"Erro ao baixar arquivo\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6898},"server/storage.ts":{"content":"// Using simple in-memory storage for this validation platform\n// No persistent data storage needed for validation operations\n\nexport interface IStorage {\n  // No persistent storage needed for validation operations\n  // All validations are stateless\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // No storage required for validation operations\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":418},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// CPF/CNPJ Validation\nexport const cpfCnpjValidationRequestSchema = z.object({\n  document: z.string().min(1, \"Documento é obrigatório\"),\n});\n\nexport const cpfCnpjValidationResponseSchema = z.object({\n  success: z.boolean(),\n  valid: z.boolean(),\n  document: z.string(),\n  formattedDocument: z.string(),\n  type: z.enum([\"CPF\", \"CNPJ\"]),\n  message: z.string(),\n});\n\n// Phone Validation\nexport const phoneValidationRequestSchema = z.object({\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n  type: z.enum([\"br\", \"international\"]).default(\"br\"),\n});\n\nexport const phoneValidationResponseSchema = z.object({\n  success: z.boolean(),\n  valid: z.boolean(),\n  phone: z.string(),\n  formattedPhone: z.string(),\n  type: z.enum([\"Fixo\", \"Celular\", \"0800\", \"4004\", \"Internacional\"]),\n  areaCode: z.string().optional(),\n  areaName: z.string().optional(),\n  carrier: z.string().optional(),\n  message: z.string(),\n});\n\n// CEP Validation\nexport const cepValidationRequestSchema = z.object({\n  cep: z.string().min(1, \"CEP é obrigatório\"),\n});\n\nexport const cepValidationResponseSchema = z.object({\n  success: z.boolean(),\n  valid: z.boolean(),\n  cep: z.string(),\n  formattedCep: z.string(),\n  address: z.object({\n    street: z.string(),\n    neighborhood: z.string(),\n    city: z.string(),\n    state: z.string(),\n    ibge: z.string().optional(),\n  }).optional(),\n  message: z.string(),\n});\n\n// Email Validation\nexport const emailValidationRequestSchema = z.object({\n  email: z.string().min(1, \"Email é obrigatório\"),\n});\n\nexport const emailValidationResponseSchema = z.object({\n  success: z.boolean(),\n  valid: z.boolean(),\n  email: z.string(),\n  result: z.enum([\"valid\", \"invalid\", \"unknown\"]),\n  reason: z.string(),\n  message: z.string(),\n  checks: z.object({\n    syntax: z.boolean(),\n    domain: z.boolean(),\n    mx: z.boolean(),\n    smtp: z.boolean(),\n    disposable: z.boolean(),\n    roleBase: z.boolean(),\n    catchAll: z.boolean(),\n  }),\n  didYouMean: z.string().optional(),\n});\n\n// File Conversion\nexport const fileConversionRequestSchema = z.object({\n  type: z.enum([\n    'word-to-pdf',\n    'pdf-to-word', \n    'image-converter'\n  ]),\n});\n\nexport const fileConversionResponseSchema = z.object({\n  success: z.boolean(),\n  downloadUrl: z.string().optional(),\n  filename: z.string().optional(),\n  originalName: z.string().optional(),\n  size: z.number().optional(),\n  format: z.string().optional(),\n  error: z.string().optional(),\n});\n\nexport type CpfCnpjValidationRequest = z.infer<typeof cpfCnpjValidationRequestSchema>;\nexport type CpfCnpjValidationResponse = z.infer<typeof cpfCnpjValidationResponseSchema>;\nexport type PhoneValidationRequest = z.infer<typeof phoneValidationRequestSchema>;\nexport type PhoneValidationResponse = z.infer<typeof phoneValidationResponseSchema>;\nexport type CepValidationRequest = z.infer<typeof cepValidationRequestSchema>;\nexport type CepValidationResponse = z.infer<typeof cepValidationResponseSchema>;\nexport type EmailValidationRequest = z.infer<typeof emailValidationRequestSchema>;\nexport type EmailValidationResponse = z.infer<typeof emailValidationResponseSchema>;\nexport type FileConversionRequest = z.infer<typeof fileConversionRequestSchema>;\nexport type FileConversionResponse = z.infer<typeof fileConversionResponseSchema>;\n","size_bytes":3298},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport CpfCnpjPage from \"@/pages/cpf-cnpj\";\nimport TelefonePage from \"@/pages/telefone\";\nimport CepPage from \"@/pages/cep\";\nimport EmailPage from \"@/pages/email\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/cpf-cnpj\" component={CpfCnpjPage} />\n      <Route path=\"/telefone\" component={TelefonePage} />\n      <Route path=\"/cep\" component={CepPage} />\n      <Route path=\"/email\" component={EmailPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1077},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/validators.ts":{"content":"import { createHash } from 'crypto';\nimport dns from 'dns';\nimport net from 'net';\nimport {\n  CpfCnpjValidationResponse,\n  PhoneValidationResponse,\n  CepValidationResponse,\n  EmailValidationResponse\n} from '@shared/schema';\n\n// CPF/CNPJ Validation\nexport class DocumentValidator {\n  static validateCpfCnpj(document: string): CpfCnpjValidationResponse {\n    try {\n      const cleanDoc = document.replace(/\\D/g, '');\n      \n      if (cleanDoc.length === 11) {\n        return this.validateCpf(cleanDoc);\n      } else if (cleanDoc.length === 14) {\n        return this.validateCnpj(cleanDoc);\n      } else {\n        return {\n          success: false,\n          valid: false,\n          document,\n          formattedDocument: document,\n          type: cleanDoc.length < 12 ? \"CPF\" : \"CNPJ\",\n          message: \"Documento deve ter 11 dígitos (CPF) ou 14 dígitos (CNPJ)\"\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        valid: false,\n        document,\n        formattedDocument: document,\n        type: \"CPF\",\n        message: \"Erro ao validar documento\"\n      };\n    }\n  }\n\n  private static validateCpf(cpf: string): CpfCnpjValidationResponse {\n    // Check for invalid sequences\n    const invalidSequences = ['00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999'];\n    if (invalidSequences.includes(cpf)) {\n      return {\n        success: true,\n        valid: false,\n        document: cpf,\n        formattedDocument: this.formatCpf(cpf),\n        type: \"CPF\",\n        message: \"CPF com sequência inválida\"\n      };\n    }\n\n    // Validate first digit\n    let sum = 0;\n    for (let i = 0; i < 9; i++) {\n      sum += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    let remainder = (sum * 10) % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(cpf.charAt(9))) {\n      return {\n        success: true,\n        valid: false,\n        document: cpf,\n        formattedDocument: this.formatCpf(cpf),\n        type: \"CPF\",\n        message: \"CPF inválido - primeiro dígito verificador incorreto\"\n      };\n    }\n\n    // Validate second digit\n    sum = 0;\n    for (let i = 0; i < 10; i++) {\n      sum += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    remainder = (sum * 10) % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(cpf.charAt(10))) {\n      return {\n        success: true,\n        valid: false,\n        document: cpf,\n        formattedDocument: this.formatCpf(cpf),\n        type: \"CPF\",\n        message: \"CPF inválido - segundo dígito verificador incorreto\"\n      };\n    }\n\n    return {\n      success: true,\n      valid: true,\n      document: cpf,\n      formattedDocument: this.formatCpf(cpf),\n      type: \"CPF\",\n      message: \"CPF válido\"\n    };\n  }\n\n  private static validateCnpj(cnpj: string): CpfCnpjValidationResponse {\n    // Check for invalid sequences\n    const invalidSequences = ['00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'];\n    if (invalidSequences.includes(cnpj)) {\n      return {\n        success: true,\n        valid: false,\n        document: cnpj,\n        formattedDocument: this.formatCnpj(cnpj),\n        type: \"CNPJ\",\n        message: \"CNPJ com sequência inválida\"\n      };\n    }\n\n    // Validate first digit\n    const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    let sum = 0;\n    for (let i = 0; i < 12; i++) {\n      sum += parseInt(cnpj.charAt(i)) * weights1[i];\n    }\n    let remainder = sum % 11;\n    const digit1 = remainder < 2 ? 0 : 11 - remainder;\n    if (digit1 !== parseInt(cnpj.charAt(12))) {\n      return {\n        success: true,\n        valid: false,\n        document: cnpj,\n        formattedDocument: this.formatCnpj(cnpj),\n        type: \"CNPJ\",\n        message: \"CNPJ inválido - primeiro dígito verificador incorreto\"\n      };\n    }\n\n    // Validate second digit\n    const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    sum = 0;\n    for (let i = 0; i < 13; i++) {\n      sum += parseInt(cnpj.charAt(i)) * weights2[i];\n    }\n    remainder = sum % 11;\n    const digit2 = remainder < 2 ? 0 : 11 - remainder;\n    if (digit2 !== parseInt(cnpj.charAt(13))) {\n      return {\n        success: true,\n        valid: false,\n        document: cnpj,\n        formattedDocument: this.formatCnpj(cnpj),\n        type: \"CNPJ\",\n        message: \"CNPJ inválido - segundo dígito verificador incorreto\"\n      };\n    }\n\n    return {\n      success: true,\n      valid: true,\n      document: cnpj,\n      formattedDocument: this.formatCnpj(cnpj),\n      type: \"CNPJ\",\n      message: \"CNPJ válido\"\n    };\n  }\n\n  private static formatCpf(cpf: string): string {\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n  }\n\n  private static formatCnpj(cnpj: string): string {\n    return cnpj.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5');\n  }\n}\n\n// Phone Validation\nexport class PhoneValidator {\n  private static readonly AREA_CODES: { [key: string]: string } = {\n    '11': 'São Paulo',\n    '12': 'São Paulo',\n    '13': 'São Paulo',\n    '14': 'São Paulo',\n    '15': 'São Paulo',\n    '16': 'São Paulo',\n    '17': 'São Paulo',\n    '18': 'São Paulo',\n    '19': 'São Paulo',\n    '21': 'Rio de Janeiro',\n    '22': 'Rio de Janeiro',\n    '24': 'Rio de Janeiro',\n    '27': 'Espírito Santo',\n    '28': 'Espírito Santo',\n    '31': 'Minas Gerais',\n    '32': 'Minas Gerais',\n    '33': 'Minas Gerais',\n    '34': 'Minas Gerais',\n    '35': 'Minas Gerais',\n    '37': 'Minas Gerais',\n    '38': 'Minas Gerais',\n    '41': 'Paraná',\n    '42': 'Paraná',\n    '43': 'Paraná',\n    '44': 'Paraná',\n    '45': 'Paraná',\n    '46': 'Paraná',\n    '47': 'Santa Catarina',\n    '48': 'Santa Catarina',\n    '49': 'Santa Catarina',\n    '51': 'Rio Grande do Sul',\n    '53': 'Rio Grande do Sul',\n    '54': 'Rio Grande do Sul',\n    '55': 'Rio Grande do Sul',\n    '61': 'Distrito Federal',\n    '62': 'Goiás',\n    '63': 'Tocantins',\n    '64': 'Goiás',\n    '65': 'Mato Grosso',\n    '66': 'Mato Grosso',\n    '67': 'Mato Grosso do Sul',\n    '68': 'Acre',\n    '69': 'Rondônia',\n    '71': 'Bahia',\n    '73': 'Bahia',\n    '74': 'Bahia',\n    '75': 'Bahia',\n    '77': 'Bahia',\n    '79': 'Sergipe',\n    '81': 'Pernambuco',\n    '82': 'Alagoas',\n    '83': 'Paraíba',\n    '84': 'Rio Grande do Norte',\n    '85': 'Ceará',\n    '86': 'Piauí',\n    '87': 'Pernambuco',\n    '88': 'Ceará',\n    '89': 'Piauí',\n    '91': 'Pará',\n    '92': 'Amazonas',\n    '93': 'Pará',\n    '94': 'Pará',\n    '95': 'Roraima',\n    '96': 'Amapá',\n    '97': 'Amazonas',\n    '98': 'Maranhão',\n    '99': 'Maranhão'\n  };\n\n  private static readonly CARRIERS: { [key: string]: string[] } = {\n    'Vivo': ['15', '16', '17'],\n    'TIM': ['14', '15', '16'],\n    'Claro': ['11', '12', '13', '14', '15'],\n    'Oi': ['14', '15', '16', '17']\n  };\n\n  static validatePhone(phone: string, type: 'br' | 'international'): PhoneValidationResponse {\n    try {\n      const cleanPhone = phone.replace(/\\D/g, '');\n      \n      if (type === 'br') {\n        return this.validateBrazilianPhone(cleanPhone);\n      } else {\n        return this.validateInternationalPhone(cleanPhone);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        valid: false,\n        phone,\n        formattedPhone: phone,\n        type: 'Celular',\n        message: 'Erro ao validar telefone'\n      };\n    }\n  }\n\n  private static validateBrazilianPhone(phone: string): PhoneValidationResponse {\n    // Check 0800\n    if (phone.startsWith('0800') && phone.length === 10) {\n      return {\n        success: true,\n        valid: true,\n        phone,\n        formattedPhone: phone.replace(/(\\d{4})(\\d{3})(\\d{4})/, '$1 $2 $3'),\n        type: '0800',\n        message: 'Número 0800 válido'\n      };\n    }\n\n    // Check 4004\n    if (phone.startsWith('4004') && phone.length === 8) {\n      return {\n        success: true,\n        valid: true,\n        phone,\n        formattedPhone: phone.replace(/(\\d{4})(\\d{4})/, '$1-$2'),\n        type: '4004',\n        message: 'Número 4004 válido'\n      };\n    }\n\n    // Check mobile (11 digits) or landline (10 digits)\n    if (phone.length === 11 || phone.length === 10) {\n      const areaCode = phone.substring(0, 2);\n      const areaName = this.AREA_CODES[areaCode];\n      \n      if (!areaName) {\n        return {\n          success: true,\n          valid: false,\n          phone,\n          formattedPhone: this.formatBrazilianPhone(phone),\n          type: phone.length === 11 ? 'Celular' : 'Fixo',\n          message: 'DDD inválido'\n        };\n      }\n\n      // Mobile validation (11 digits, 9 as first digit)\n      if (phone.length === 11) {\n        const firstDigit = phone.charAt(2);\n        if (firstDigit !== '9') {\n          return {\n            success: true,\n            valid: false,\n            phone,\n            formattedPhone: this.formatBrazilianPhone(phone),\n            type: 'Celular',\n            areaCode,\n            areaName,\n            message: 'Número de celular deve começar com 9'\n          };\n        }\n\n        const carrier = this.detectCarrier(phone.substring(2, 4));\n        return {\n          success: true,\n          valid: true,\n          phone,\n          formattedPhone: this.formatBrazilianPhone(phone),\n          type: 'Celular',\n          areaCode,\n          areaName: `${areaCode} - ${areaName}`,\n          carrier,\n          message: 'Número de celular válido'\n        };\n      }\n\n      // Landline validation (10 digits)\n      return {\n        success: true,\n        valid: true,\n        phone,\n        formattedPhone: this.formatBrazilianPhone(phone),\n        type: 'Fixo',\n        areaCode,\n        areaName: `${areaCode} - ${areaName}`,\n        message: 'Número fixo válido'\n      };\n    }\n\n    return {\n      success: true,\n      valid: false,\n      phone,\n      formattedPhone: phone,\n      type: 'Celular',\n      message: 'Formato de telefone inválido'\n    };\n  }\n\n  private static validateInternationalPhone(phone: string): PhoneValidationResponse {\n    // Basic international phone validation\n    if (phone.length >= 8 && phone.length <= 15) {\n      return {\n        success: true,\n        valid: true,\n        phone,\n        formattedPhone: phone,\n        type: 'Internacional',\n        message: 'Número internacional válido'\n      };\n    }\n\n    return {\n      success: true,\n      valid: false,\n      phone,\n      formattedPhone: phone,\n      type: 'Internacional',\n      message: 'Número internacional deve ter entre 8 e 15 dígitos'\n    };\n  }\n\n  private static formatBrazilianPhone(phone: string): string {\n    if (phone.length === 11) {\n      return phone.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n    } else if (phone.length === 10) {\n      return phone.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n    }\n    return phone;\n  }\n\n  private static detectCarrier(prefix: string): string {\n    for (const [carrier, prefixes] of Object.entries(this.CARRIERS)) {\n      if (prefixes.includes(prefix)) {\n        return carrier;\n      }\n    }\n    return 'Não identificada';\n  }\n}\n\n// CEP Validation\nexport class CepValidator {\n  static async validateCep(cep: string): Promise<CepValidationResponse> {\n    try {\n      const cleanCep = cep.replace(/\\D/g, '');\n      \n      if (cleanCep.length !== 8) {\n        return {\n          success: true,\n          valid: false,\n          cep: cleanCep,\n          formattedCep: this.formatCep(cleanCep),\n          message: 'CEP deve ter 8 dígitos'\n        };\n      }\n\n      const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);\n      const data = await response.json();\n\n      if (data.erro) {\n        return {\n          success: true,\n          valid: false,\n          cep: cleanCep,\n          formattedCep: this.formatCep(cleanCep),\n          message: 'CEP não encontrado'\n        };\n      }\n\n      return {\n        success: true,\n        valid: true,\n        cep: cleanCep,\n        formattedCep: this.formatCep(cleanCep),\n        address: {\n          street: data.logradouro || 'N/A',\n          neighborhood: data.bairro || 'N/A',\n          city: data.localidade || 'N/A',\n          state: data.uf || 'N/A',\n          ibge: data.ibge || undefined,\n        },\n        message: 'CEP encontrado'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        valid: false,\n        cep,\n        formattedCep: this.formatCep(cep),\n        message: 'Erro ao consultar CEP'\n      };\n    }\n  }\n\n  private static formatCep(cep: string): string {\n    const cleanCep = cep.replace(/\\D/g, '');\n    return cleanCep.replace(/(\\d{5})(\\d{3})/, '$1-$2');\n  }\n}\n\n// Email Validation (converted from Python)\nexport class EmailValidator {\n  private static readonly DISPOSABLE_DOMAINS = new Set([\n    'mailinator.com', 'tempmail.com', '10minutemail.com', 'guerrillamail.com',\n    'sharklasers.com', 'throwawaymail.com', 'yopmail.com', 'dispostable.com'\n  ]);\n\n  private static readonly ROLE_PREFIXES = new Set([\n    'admin', 'support', 'info', 'contact', 'sales', 'billing', 'help',\n    'webmaster', 'marketing', 'team', 'office', 'noreply'\n  ]);\n\n  private static readonly POPULAR_DOMAINS = [\n    'hotmail.com', 'gmail.com', 'icloud.com', 'outlook.com', 'yahoo.com', 'ymail.com',\n    'hotmail.com.br', 'gmail.com.br', 'yahoo.com.br', 'outlook.com.br'\n  ];\n\n  static async validateEmail(email: string): Promise<EmailValidationResponse> {\n    try {\n      // Basic syntax validation\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(email)) {\n        return {\n          success: true,\n          valid: false,\n          email,\n          result: 'invalid',\n          reason: 'invalid_format',\n          message: 'Formato de email inválido',\n          checks: {\n            syntax: false,\n            domain: false,\n            mx: false,\n            smtp: false,\n            disposable: false,\n            roleBase: false,\n            catchAll: false,\n          }\n        };\n      }\n\n      const [user, domain] = email.split('@');\n      const domainLower = domain.toLowerCase();\n      \n      // Check for typos in popular domains\n      let didYouMean: string | undefined;\n      if (!this.POPULAR_DOMAINS.includes(domainLower)) {\n        didYouMean = this.findSimilarDomain(domainLower);\n        if (didYouMean) {\n          return {\n            success: true,\n            valid: false,\n            email,\n            result: 'invalid',\n            reason: 'suspected_typo',\n            message: `Domínio suspeito, você quis dizer ${didYouMean}?`,\n            checks: {\n              syntax: true,\n              domain: false,\n              mx: false,\n              smtp: false,\n              disposable: false,\n              roleBase: false,\n              catchAll: false,\n            },\n            didYouMean\n          };\n        }\n      }\n\n      // Check if disposable\n      const isDisposable = this.DISPOSABLE_DOMAINS.has(domainLower);\n      \n      // Check if role-based\n      const isRoleBased = this.ROLE_PREFIXES.has(user.toLowerCase());\n\n      // DNS and MX validation\n      let domainExists = false;\n      let mxExists = false;\n      let smtpConnectable = false;\n\n      try {\n        await this.resolveDomain(domain);\n        domainExists = true;\n        \n        const mxRecords = await this.resolveMX(domain);\n        mxExists = mxRecords.length > 0;\n        \n        if (mxExists) {\n          smtpConnectable = await this.testSMTPConnection(mxRecords[0].exchange);\n        }\n      } catch (error) {\n        // DNS resolution failed\n      }\n\n      if (!domainExists) {\n        return {\n          success: true,\n          valid: false,\n          email,\n          result: 'invalid',\n          reason: 'invalid_domain',\n          message: 'Domínio não existe',\n          checks: {\n            syntax: true,\n            domain: false,\n            mx: false,\n            smtp: false,\n            disposable: isDisposable,\n            roleBase: isRoleBased,\n            catchAll: false,\n          }\n        };\n      }\n\n      if (!mxExists) {\n        return {\n          success: true,\n          valid: false,\n          email,\n          result: 'invalid',\n          reason: 'no_mx_records',\n          message: 'Nenhum registro MX encontrado',\n          checks: {\n            syntax: true,\n            domain: true,\n            mx: false,\n            smtp: false,\n            disposable: isDisposable,\n            roleBase: isRoleBased,\n            catchAll: false,\n          }\n        };\n      }\n\n      return {\n        success: true,\n        valid: smtpConnectable,\n        email,\n        result: smtpConnectable ? 'valid' : 'invalid',\n        reason: smtpConnectable ? 'smtp_connect_success' : 'smtp_connect_failed',\n        message: smtpConnectable ? 'Email válido' : 'Falha ao conectar ao servidor SMTP',\n        checks: {\n          syntax: true,\n          domain: domainExists,\n          mx: mxExists,\n          smtp: smtpConnectable,\n          disposable: isDisposable,\n          roleBase: isRoleBased,\n          catchAll: false, // Simplified for now\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        valid: false,\n        email,\n        result: 'unknown',\n        reason: 'exception',\n        message: 'Erro inesperado durante a verificação',\n        checks: {\n          syntax: false,\n          domain: false,\n          mx: false,\n          smtp: false,\n          disposable: false,\n          roleBase: false,\n          catchAll: false,\n        }\n      };\n    }\n  }\n\n  private static findSimilarDomain(domain: string): string | undefined {\n    for (const popularDomain of this.POPULAR_DOMAINS) {\n      if (this.calculateSimilarity(domain, popularDomain) > 0.85) {\n        return popularDomain;\n      }\n    }\n    return undefined;\n  }\n\n  private static calculateSimilarity(str1: string, str2: string): number {\n    const matrix = [];\n    const len1 = str1.length;\n    const len2 = str2.length;\n\n    for (let i = 0; i <= len2; i++) {\n      matrix[i] = [i];\n    }\n\n    for (let j = 0; j <= len1; j++) {\n      matrix[0][j] = j;\n    }\n\n    for (let i = 1; i <= len2; i++) {\n      for (let j = 1; j <= len1; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n\n    const distance = matrix[len2][len1];\n    const maxLen = Math.max(len1, len2);\n    return (maxLen - distance) / maxLen;\n  }\n\n  private static resolveDomain(domain: string): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      dns.resolve4(domain, (err, addresses) => {\n        if (err) reject(err);\n        else resolve(addresses);\n      });\n    });\n  }\n\n  private static resolveMX(domain: string): Promise<dns.MxRecord[]> {\n    return new Promise((resolve, reject) => {\n      dns.resolveMx(domain, (err, records) => {\n        if (err) reject(err);\n        else resolve(records);\n      });\n    });\n  }\n\n  private static testSMTPConnection(mxRecord: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      const socket = new net.Socket();\n      const timeout = setTimeout(() => {\n        socket.destroy();\n        resolve(false);\n      }, 5000);\n\n      socket.connect(25, mxRecord, () => {\n        clearTimeout(timeout);\n        socket.destroy();\n        resolve(true);\n      });\n\n      socket.on('error', () => {\n        clearTimeout(timeout);\n        resolve(false);\n      });\n    });\n  }\n}\n","size_bytes":19694},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-validation.ts":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { \n  CpfCnpjValidationRequest, CpfCnpjValidationResponse,\n  PhoneValidationRequest, PhoneValidationResponse,\n  CepValidationRequest, CepValidationResponse,\n  EmailValidationRequest, EmailValidationResponse\n} from \"@shared/schema\";\n\ninterface UseValidationOptions {\n  onSuccess?: (data: any) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function useValidation(options: UseValidationOptions = {}) {\n  const cpfCnpjMutation = useMutation({\n    mutationFn: async (data: CpfCnpjValidationRequest): Promise<CpfCnpjValidationResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/validate/cpf-cnpj\", data);\n      return response.json();\n    },\n    onSuccess: options.onSuccess,\n    onError: options.onError,\n  });\n\n  const phoneMutation = useMutation({\n    mutationFn: async (data: PhoneValidationRequest): Promise<PhoneValidationResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/validate/phone\", data);\n      return response.json();\n    },\n    onSuccess: options.onSuccess,\n    onError: options.onError,\n  });\n\n  const cepMutation = useMutation({\n    mutationFn: async (data: CepValidationRequest): Promise<CepValidationResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/validate/cep\", data);\n      return response.json();\n    },\n    onSuccess: options.onSuccess,\n    onError: options.onError,\n  });\n\n  const emailMutation = useMutation({\n    mutationFn: async (data: EmailValidationRequest): Promise<EmailValidationResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/validate/email\", data);\n      return response.json();\n    },\n    onSuccess: options.onSuccess,\n    onError: options.onError,\n  });\n\n  return {\n    validateCpfCnpj: cpfCnpjMutation.mutate,\n    validatePhone: phoneMutation.mutate,\n    validateCep: cepMutation.mutate,\n    validateEmail: emailMutation.mutate,\n    isLoading: cpfCnpjMutation.isPending || phoneMutation.isPending || cepMutation.isPending || emailMutation.isPending,\n  };\n}\n","size_bytes":2088},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/validation-utils.ts":{"content":"export function formatCpfCnpj(value: string): string {\n  const cleanValue = value.replace(/\\D/g, '');\n  \n  if (cleanValue.length <= 11) {\n    // CPF format\n    return cleanValue\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n  } else {\n    // CNPJ format\n    return cleanValue\n      .replace(/(\\d{2})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\n      .replace(/(\\d{3})(\\d)/, '$1/$2')\n      .replace(/(\\d{4})(\\d{1,2})$/, '$1-$2');\n  }\n}\n\nexport function formatPhone(value: string): string {\n  const cleanValue = value.replace(/\\D/g, '');\n  \n  if (cleanValue.length <= 11) {\n    return cleanValue\n      .replace(/(\\d{2})(\\d)/, '($1) $2')\n      .replace(/(\\d{4,5})(\\d{4})$/, '$1-$2');\n  }\n  return cleanValue;\n}\n\nexport function formatCep(value: string): string {\n  const cleanValue = value.replace(/\\D/g, '');\n  \n  if (cleanValue.length <= 8) {\n    return cleanValue.replace(/(\\d{5})(\\d)/, '$1-$2');\n  }\n  return cleanValue;\n}\n","size_bytes":1012},"client/src/pages/cep.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport CepValidator from \"@/components/validation/cep-validator\";\nimport AdPlaceholder from \"@/components/ui/ad-placeholder\";\nimport { Link } from \"wouter\";\n\nexport default function CepPage() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 font-sans\">\n      <Header />\n      \n      <CepValidator onBack={() => {}} />\n      \n      {/* SEO Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Consulta de CEP Online - Endereço Completo Gratuito\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              Encontre endereços completos através do CEP. Consulta rápida via API oficial dos Correios \n              e ViaCEP com dados sempre atualizados.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-search text-purple-600 mr-2\"></i>\n                O que você encontra\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Logradouro (rua, avenida, praça)</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Bairro e distrito</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Cidade e município</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Estado (UF) e região</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Código IBGE quando disponível</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-database text-purple-600 mr-2\"></i>\n                Fontes de Dados\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>API oficial ViaCEP</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Base de dados dos Correios</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Informações sempre atualizadas</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Cobertura nacional completa</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Resposta em formato JSON</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-tachometer-alt text-purple-600 mr-2\"></i>\n                Consulta Rápida\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Resultados em menos de 1 segundo. Digite o CEP e receba todas as informações instantaneamente.\n              </p>\n            </div>\n            \n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-shield-alt text-blue-600 mr-2\"></i>\n                100% Seguro\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Não armazenamos seus dados. Todas as consultas são realizadas em tempo real.\n              </p>\n            </div>\n            \n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-mobile-alt text-green-600 mr-2\"></i>\n                Mobile Ready\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Interface otimizada para celulares e tablets. Consulte CEPs em qualquer lugar.\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-6 mb-8\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-info-circle text-purple-600 mr-2\"></i>\n              Como usar o Consultor de CEP\n            </h4>\n            <p className=\"text-slate-600 mb-3\">\n              1. Digite o CEP no formato 00000-000 (a formatação é automática)<br/>\n              2. Clique em \"Consultar CEP\" ou pressione Enter<br/>\n              3. Receba instantaneamente todas as informações do endereço\n            </p>\n            <p className=\"text-slate-600\">\n              <strong>Dica:</strong> Você pode digitar apenas os números. Nossa ferramenta formata automaticamente \n              no padrão brasileiro 00000-000.\n            </p>\n          </div>\n          \n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-exclamation-triangle text-yellow-600 mr-2\"></i>\n              CEP não encontrado?\n            </h4>\n            <p className=\"text-slate-600\">\n              Se o CEP não for encontrado, verifique se foi digitado corretamente. CEPs muito novos podem \n              demorar alguns dias para aparecer na base dos Correios. Em caso de dúvida, consulte diretamente \n              o site dos Correios.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      {/* AdSense Placement - Middle */}\n      <AdPlaceholder \n        type=\"square\" \n        description=\"[ Espaço para Anúncio AdSense - Square Banner ]\"\n        dimensions=\"300x250 ou 336x280\"\n      />\n      \n      {/* AdSense Placement - Before Footer */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":7364},"client/src/pages/cpf-cnpj.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport CpfCnpjValidator from \"@/components/validation/cpf-cnpj-validator\";\nimport AdPlaceholder from \"@/components/ui/ad-placeholder\";\nimport { Link } from \"wouter\";\n\nexport default function CpfCnpjPage() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 font-sans\">\n      <Header />\n      \n      <CpfCnpjValidator onBack={() => {}} />\n      \n      {/* SEO Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Validador de CPF e CNPJ Online - Gratuito e Seguro\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              Valide CPF e CNPJ com algoritmo oficial brasileiro. Verificação instantânea de dígitos verificadores\n              para garantir a autenticidade dos documentos.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-id-card text-blue-600 mr-2\"></i>\n                Como Funciona a Validação de CPF\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Verificação dos 11 dígitos do CPF</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Cálculo dos dígitos verificadores</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Detecção de sequências inválidas</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Formatação automática do número</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-building text-blue-600 mr-2\"></i>\n                Como Funciona a Validação de CNPJ\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Verificação dos 14 dígitos do CNPJ</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Algoritmo oficial da Receita Federal</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Validação dos dois dígitos verificadores</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Formatação padrão 00.000.000/0000-00</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-info-circle text-blue-600 mr-2\"></i>\n              Por que validar CPF e CNPJ?\n            </h4>\n            <p className=\"text-slate-600\">\n              A validação de CPF e CNPJ é essencial para verificar a autenticidade dos documentos antes de \n              processar cadastros, realizar transações ou cumprir obrigações fiscais. Nossa ferramenta utiliza \n              o algoritmo oficial brasileiro, garantindo 100% de precisão na verificação dos dígitos verificadores.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      {/* AdSense Placement - Middle */}\n      <AdPlaceholder \n        type=\"square\" \n        description=\"[ Espaço para Anúncio AdSense - Square Banner ]\"\n        dimensions=\"300x250 ou 336x280\"\n      />\n      \n      {/* AdSense Placement - Before Footer */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":4842},"client/src/pages/email.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport EmailValidator from \"@/components/validation/email-validator\";\nimport AdPlaceholder from \"@/components/ui/ad-placeholder\";\nimport { Link } from \"wouter\";\n\nexport default function EmailPage() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 font-sans\">\n      <Header />\n      \n      <EmailValidator onBack={() => {}} />\n      \n      {/* SEO Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Validador de Email Profissional - Verificação Completa\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              Validação completa de endereços de email com verificação de DNS, MX Records, SMTP, \n              detecção de emails descartáveis e verificação de domínios suspeitos.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-shield-check text-orange-600 mr-2\"></i>\n                Verificações Realizadas\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Validação de sintaxe RFC5322</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Verificação de existência do domínio</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Consulta de registros MX</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Teste de conectividade SMTP</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Detecção de emails descartáveis</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Identificação de emails de função</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-exclamation-triangle text-orange-600 mr-2\"></i>\n                Problemas Detectados\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Emails temporários e descartáveis</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Domínios com erros de digitação</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Emails de função (admin, support)</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Domínios inexistentes</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Servidores de email inativos</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times text-red-500 mt-1\"></i>\n                  <span>Sintaxe inválida ou malformada</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-robot text-orange-600 mr-2\"></i>\n                Anti-Spam\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Detecta emails temporários de serviços como 10minutemail, tempmail e guerrillamail.\n              </p>\n            </div>\n            \n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-server text-blue-600 mr-2\"></i>\n                Verificação Real\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Conecta diretamente aos servidores de email para verificar se realmente existem.\n              </p>\n            </div>\n            \n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-spell-check text-green-600 mr-2\"></i>\n                Correção Automática\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Sugere correções para domínios populares quando detecta possíveis erros de digitação.\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-6 mb-8\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-lightbulb text-orange-600 mr-2\"></i>\n              Por que validar emails?\n            </h4>\n            <p className=\"text-slate-600 mb-3\">\n              A validação de emails é crucial para manter a qualidade da sua base de dados e melhorar \n              a deliverability das suas campanhas. Emails inválidos aumentam sua taxa de bounce e \n              podem prejudicar sua reputação como remetente.\n            </p>\n            <ul className=\"text-sm text-slate-600 space-y-1\">\n              <li><strong>• Reduz bounce rate:</strong> Evita emails que retornam</li>\n              <li><strong>• Melhora deliverability:</strong> Aumenta a taxa de entrega</li>\n              <li><strong>• Protege reputação:</strong> Evita ser marcado como spam</li>\n              <li><strong>• Economiza recursos:</strong> Não envia para emails inválidos</li>\n            </ul>\n          </div>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-cogs text-blue-600 mr-2\"></i>\n              Como funciona nossa validação\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-slate-600\">\n              <div>\n                <p className=\"font-medium text-slate-900 mb-1\">1. Verificação de Sintaxe</p>\n                <p>Confere se o email segue o padrão RFC5322 oficial</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-slate-900 mb-1\">2. Verificação DNS</p>\n                <p>Confirma se o domínio realmente existe na internet</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-slate-900 mb-1\">3. Consulta MX Records</p>\n                <p>Verifica se há servidores de email configurados</p>\n              </div>\n              <div>\n                <p className=\"font-medium text-slate-900 mb-1\">4. Teste SMTP</p>\n                <p>Conecta ao servidor para verificar se está ativo</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-info-circle text-yellow-600 mr-2\"></i>\n              Limitações da validação\n            </h4>\n            <p className=\"text-slate-600\">\n              Nossa validação verifica se o email é tecnicamente válido e se o servidor existe, mas não \n              pode garantir que a caixa postal específica existe ou está ativa. Para isso seria necessário \n              enviar um email de confirmação real. Alguns servidores também podem bloquear verificações \n              automáticas por segurança.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      {/* AdSense Placement - Middle */}\n      <AdPlaceholder \n        type=\"square\" \n        description=\"[ Espaço para Anúncio AdSense - Square Banner ]\"\n        dimensions=\"300x250 ou 336x280\"\n      />\n      \n      {/* AdSense Placement - Before Footer */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":9524},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ToolCard from \"@/components/validation/tool-card\";\nimport AdPlaceholder from \"@/components/ui/ad-placeholder\";\n\nexport default function Home() {\n  const validationTools = [\n    {\n      id: 'cpf-cnpj' as const,\n      title: 'CPF / CNPJ',\n      description: 'Valide documentos brasileiros com algoritmo oficial de dígitos verificadores',\n      icon: 'fas fa-id-card',\n      bgColor: 'bg-blue-100',\n      iconColor: 'text-blue-600',\n      href: '/cpf-cnpj',\n    },\n    {\n      id: 'telefone' as const,\n      title: 'Telefone',\n      description: 'Verifica números brasileiros e internacionais com detecção de operadora',\n      icon: 'fas fa-phone',\n      bgColor: 'bg-green-100',\n      iconColor: 'text-green-600',\n      href: '/telefone',\n    },\n    {\n      id: 'cep' as const,\n      title: 'CEP',\n      description: 'Consulta endereço completo via API dos Correios e ViaCEP',\n      icon: 'fas fa-map-marker-alt',\n      bgColor: 'bg-purple-100',\n      iconColor: 'text-purple-600',\n      href: '/cep',\n    },\n    {\n      id: 'email' as const,\n      title: 'Email',\n      description: 'Validação completa com DNS, MX, SMTP e detecção de domínios descartáveis',\n      icon: 'fas fa-envelope',\n      bgColor: 'bg-orange-100',\n      iconColor: 'text-orange-600',\n      href: '/email',\n    },\n  ];\n\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 font-sans\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-blue-50 to-indigo-100 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-slate-900 mb-6\">\n            Validação Rápida e Confiável\n          </h2>\n          <p className=\"text-xl text-slate-600 mb-8 max-w-3xl mx-auto\">\n            Ferramentas profissionais para validar CPF, CNPJ, telefone, CEP e email. \n            Rápido, seguro e totalmente gratuito.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-6 text-sm text-slate-500\">\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-shield-alt text-green-500\"></i>\n              <span>100% Seguro</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-bolt text-yellow-500\"></i>\n              <span>Validação Instantânea</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-mobile-alt text-blue-500\"></i>\n              <span>Mobile Friendly</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* AdSense Placeholder */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n\n      {/* Tools Grid */}\n      <section id=\"ferramentas\" className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-3xl font-bold text-center text-slate-900 mb-4\">Suas Ferramentas Online</h3>\n          <p className=\"text-center text-slate-600 mb-12 max-w-2xl mx-auto\">\n            Validadores e conversores profissionais para suas necessidades diárias. Tudo gratuito, rápido e seguro.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {validationTools.map((tool) => (\n              <ToolCard\n                key={tool.id}\n                title={tool.title}\n                description={tool.description}\n                icon={tool.icon}\n                bgColor={tool.bgColor}\n                iconColor={tool.iconColor}\n                href={tool.href}\n                data-testid={`card-tool-${tool.id}`}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* AdSense Placement - Above Features */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-3xl font-bold text-center text-slate-900 mb-12\">Por que escolher ValidaBR?</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-rocket text-blue-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-2\">Rápido e Eficiente</h4>\n              <p className=\"text-slate-600\">Validação em tempo real com algoritmos otimizados para máxima performance</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-shield-alt text-green-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-2\">100% Seguro</h4>\n              <p className=\"text-slate-600\">Seus dados não são armazenados. Processamento local e conexões criptografadas</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-mobile-alt text-purple-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-2\">Mobile First</h4>\n              <p className=\"text-slate-600\">Interface responsiva otimizada para todos os dispositivos e tamanhos de tela</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"sobre\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-slate-900 mb-4\">Sobre o ValidaBR</h3>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              O ValidaBR é a plataforma mais completa e confiável para validação de documentos e dados brasileiros. \n              Desenvolvida com foco em precisão, segurança e facilidade de uso.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-shield-check text-blue-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">Algoritmos Oficiais</h4>\n              <p className=\"text-slate-600\">\n                Utilizamos apenas algoritmos oficiais brasileiros para validação de CPF e CNPJ, \n                garantindo 100% de precisão conforme especificação da Receita Federal.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-database text-green-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">APIs Confiáveis</h4>\n              <p className=\"text-slate-600\">\n                Integramos com APIs oficiais como ViaCEP dos Correios para consulta de CEP e \n                servidores DNS/SMTP reais para validação completa de emails.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-lock text-purple-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">Privacidade Total</h4>\n              <p className=\"text-slate-600\">\n                Não armazenamos nenhum dado pessoal. Todas as validações são processadas em tempo real \n                e descartadas imediatamente após o resultado.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-tachometer-alt text-orange-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">Performance Otimizada</h4>\n              <p className=\"text-slate-600\">\n                Infraestrutura moderna e otimizada para entregar resultados em milissegundos. \n                Algoritmos eficientes e cache inteligente para máxima velocidade.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-users text-red-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">Milhares de Usuários</h4>\n              <p className=\"text-slate-600\">\n                Confiado por desenvolvedores, empresas e profissionais em todo o Brasil. \n                Mais de 100.000 validações realizadas com sucesso mensalmente.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-code text-indigo-600 text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold text-slate-900 mb-3\">Open Source</h4>\n              <p className=\"text-slate-600\">\n                Código aberto e transparente. Contribua com melhorias, reporte bugs ou \n                sugira novas funcionalidades através do nosso repositório no GitHub.\n              </p>\n            </div>\n          </div>\n          \n          {/* Technical Details */}\n          <div className=\"bg-slate-50 rounded-2xl p-8 mb-12\">\n            <h4 className=\"text-2xl font-bold text-slate-900 mb-6 text-center\">\n              <i className=\"fas fa-cog text-blue-600 mr-2\"></i>\n              Tecnologias e Especificações\n            </h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div>\n                <h5 className=\"text-lg font-semibold text-slate-900 mb-4\">Validação de Documentos</h5>\n                <ul className=\"space-y-2 text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>CPF: Algoritmo oficial com verificação de dígitos verificadores</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>CNPJ: Conformidade com especificação da Receita Federal</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Detecção de sequências inválidas e formatação automática</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div>\n                <h5 className=\"text-lg font-semibold text-slate-900 mb-4\">Validação de Contatos</h5>\n                <ul className=\"space-y-2 text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Telefone: Todos os DDDs brasileiros + internacional</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>CEP: Integração oficial com Correios e ViaCEP</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Email: DNS, MX Records, SMTP e anti-spam</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 text-center\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">99.9%</div>\n              <div className=\"text-slate-600\">Precisão na Validação</div>\n            </div>\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">&lt;100ms</div>\n              <div className=\"text-slate-600\">Tempo de Resposta</div>\n            </div>\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">24/7</div>\n              <div className=\"text-slate-600\">Disponibilidade</div>\n            </div>\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-6\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">100%</div>\n              <div className=\"text-slate-600\">Gratuito</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contato\" className=\"py-16 bg-slate-900 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold mb-4\">Entre em Contato</h3>\n            <p className=\"text-lg text-slate-400 max-w-3xl mx-auto\">\n              Dúvidas, sugestões ou problemas? Estamos aqui para ajudar. \n              Nossa equipe responde em até 24 horas.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-envelope text-white text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold mb-2\">Email</h4>\n              <p className=\"text-slate-400 mb-2\">contato@validabr.com</p>\n              <p className=\"text-sm text-slate-500\">Resposta em até 24h</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-indigo-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-users text-white text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold mb-2\">Comunidade</h4>\n              <p className=\"text-slate-400 mb-2\">+10.000 usuários ativos</p>\n              <p className=\"text-sm text-slate-500\">Validações realizadas diariamente</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-question-circle text-white text-2xl\"></i>\n              </div>\n              <h4 className=\"text-xl font-semibold mb-2\">Suporte</h4>\n              <p className=\"text-slate-400 mb-2\">suporte@validabr.com</p>\n              <p className=\"text-sm text-slate-500\">Dúvidas técnicas</p>\n            </div>\n          </div>\n          \n        </div>\n      </section>\n\n      {/* Additional AdSense Placement - Before Contact */}\n      <AdPlaceholder \n        type=\"square\" \n        description=\"[ Espaço para Anúncio AdSense - Square Banner ]\"\n        dimensions=\"300x250 ou 336x280\"\n      />\n\n      {/* Final AdSense Placement - Before Footer */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16719},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/telefone.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport PhoneValidator from \"@/components/validation/phone-validator\";\nimport AdPlaceholder from \"@/components/ui/ad-placeholder\";\nimport { Link } from \"wouter\";\n\nexport default function TelefonePage() {\n  return (\n    <div className=\"min-h-screen bg-slate-50 font-sans\">\n      <Header />\n      \n      <PhoneValidator onBack={() => {}} />\n      \n      {/* SEO Content */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Validador de Telefone Brasileiro e Internacional\n            </h2>\n            <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n              Valide números de telefone brasileiros e internacionais. Identifique operadora, DDD, \n              tipo de linha e formatação correta.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-mobile-alt text-green-600 mr-2\"></i>\n                Validação de Celular\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Formato (11) 99999-9999</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Verificação do 9º dígito obrigatório</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Identificação da operadora</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Validação de DDD brasileiro</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">\n                <i className=\"fas fa-phone text-green-600 mr-2\"></i>\n                Validação de Fixo e Especiais\n              </h3>\n              <ul className=\"space-y-2 text-slate-600\">\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Telefones fixos (11) 9999-9999</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Números 0800 gratuitos</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Números 4004 de atendimento</span>\n                </li>\n                <li className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                  <span>Validação internacional básica</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-signal text-green-600 mr-2\"></i>\n                Operadoras Suportadas\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Vivo, TIM, Claro, Oi e outras operadoras brasileiras são automaticamente identificadas.\n              </p>\n            </div>\n            \n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-map-marker-alt text-blue-600 mr-2\"></i>\n                Todos os DDDs\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Validação completa de todos os DDDs brasileiros com identificação do estado.\n              </p>\n            </div>\n            \n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-slate-900 mb-2\">\n                <i className=\"fas fa-globe text-purple-600 mr-2\"></i>\n                Internacional\n              </h4>\n              <p className=\"text-sm text-slate-600\">\n                Suporte básico para validação de números telefônicos internacionais.\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-slate-900 mb-2\">\n              <i className=\"fas fa-info-circle text-green-600 mr-2\"></i>\n              Formatação Automática\n            </h4>\n            <p className=\"text-slate-600\">\n              Nossa ferramenta formata automaticamente o número enquanto você digita, facilitando a visualização \n              e garantindo o padrão brasileiro correto. Perfeito para validação em formulários e sistemas.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      {/* AdSense Placement - Middle */}\n      <AdPlaceholder \n        type=\"square\" \n        description=\"[ Espaço para Anúncio AdSense - Square Banner ]\"\n        dimensions=\"300x250 ou 336x280\"\n      />\n      \n      {/* AdSense Placement - Before Footer */}\n      <AdPlaceholder \n        type=\"horizontal\" \n        description=\"[ Espaço para Anúncio AdSense - Horizontal Banner ]\"\n        dimensions=\"728x90 ou 320x50 (responsivo)\"\n      />\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":6117},"client/src/components/layout/footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer className=\"bg-slate-900 text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-check-double text-white text-sm\"></i>\n              </div>\n              <h4 className=\"text-xl font-bold\">ValidaBR</h4>\n            </div>\n            <p className=\"text-slate-400\">Ferramentas profissionais de validação para CPF, CNPJ, telefone, CEP e email.</p>\n          </div>\n          \n          <div>\n            <h5 className=\"font-semibold mb-4\">Ferramentas</h5>\n            <ul className=\"space-y-2 text-slate-400\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\" data-testid=\"link-footer-cpf-cnpj\">Validador CPF/CNPJ</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\" data-testid=\"link-footer-phone\">Validador Telefone</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\" data-testid=\"link-footer-cep\">Consulta CEP</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\" data-testid=\"link-footer-email\">Validador Email</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h5 className=\"font-semibold mb-4\">Contato</h5>\n            <ul className=\"space-y-2 text-slate-400\">\n              <li><i className=\"fas fa-envelope mr-2\"></i> contato@validabr.com</li>\n              <li><i className=\"fas fa-shield-alt mr-2\"></i> Política de Privacidade</li>\n              <li><i className=\"fas fa-file-alt mr-2\"></i> Termos de Uso</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-slate-800 mt-8 pt-8 text-center text-slate-400\">\n          <p>&copy; 2024 ValidaBR. Todos os direitos reservados.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2104},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Header() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-check-double text-white text-sm\"></i>\n              </div>\n              <h1 className=\"text-xl font-bold text-slate-900\">ValidaBR</h1>\n            </div>\n          </Link>\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"dropdown-tools\">\n                  Ferramentas <i className=\"fas fa-chevron-down ml-1 text-xs\"></i>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-64\">\n                <div className=\"px-2 py-1 text-xs font-semibold text-slate-500 uppercase tracking-wide\">\n                  Validadores\n                </div>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/cpf-cnpj\" className=\"flex items-center space-x-2 cursor-pointer\" data-testid=\"link-cpf-cnpj\">\n                    <i className=\"fas fa-id-card text-blue-600 w-4\"></i>\n                    <span>Validador CPF/CNPJ</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/telefone\" className=\"flex items-center space-x-2 cursor-pointer\" data-testid=\"link-telefone\">\n                    <i className=\"fas fa-phone text-green-600 w-4\"></i>\n                    <span>Validador Telefone</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/cep\" className=\"flex items-center space-x-2 cursor-pointer\" data-testid=\"link-cep\">\n                    <i className=\"fas fa-map-marker-alt text-purple-600 w-4\"></i>\n                    <span>Consulta CEP</span>\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/email\" className=\"flex items-center space-x-2 cursor-pointer\" data-testid=\"link-email\">\n                    <i className=\"fas fa-envelope text-orange-600 w-4\"></i>\n                    <span>Validador Email</span>\n                  </Link>\n                </DropdownMenuItem>\n                \n              </DropdownMenuContent>\n            </DropdownMenu>\n            <a href=\"#sobre\" className=\"text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"link-about\">Sobre</a>\n            <a href=\"#contato\" className=\"text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"link-contact\">Contato</a>\n          </nav>\n          \n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"text-slate-600 hover:text-blue-600 transition-colors\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <i className={`fas ${isOpen ? 'fa-times' : 'fa-bars'}`}></i>\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile menu */}\n        {isOpen && (\n          <div className=\"md:hidden border-t border-slate-200 py-4\" data-testid=\"mobile-menu\">\n            <div className=\"space-y-3\">\n              <div className=\"text-slate-900 font-medium mb-2\">Validadores:</div>\n              <Link href=\"/cpf-cnpj\" className=\"flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"mobile-link-cpf-cnpj\">\n                <i className=\"fas fa-id-card text-blue-600 w-4\"></i>\n                <span>Validador CPF/CNPJ</span>\n              </Link>\n              <Link href=\"/telefone\" className=\"flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"mobile-link-telefone\">\n                <i className=\"fas fa-phone text-green-600 w-4\"></i>\n                <span>Validador Telefone</span>\n              </Link>\n              <Link href=\"/cep\" className=\"flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"mobile-link-cep\">\n                <i className=\"fas fa-map-marker-alt text-purple-600 w-4\"></i>\n                <span>Consulta CEP</span>\n              </Link>\n              <Link href=\"/email\" className=\"flex items-center space-x-2 text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"mobile-link-email\">\n                <i className=\"fas fa-envelope text-orange-600 w-4\"></i>\n                <span>Validador Email</span>\n              </Link>\n              \n              <div className=\"border-t border-slate-200 pt-3 mt-3\">\n                <a href=\"#sobre\" className=\"block text-slate-600 hover:text-blue-600 transition-colors mb-2\" data-testid=\"mobile-link-about\">Sobre</a>\n                <a href=\"#contato\" className=\"block text-slate-600 hover:text-blue-600 transition-colors\" data-testid=\"mobile-link-contact\">Contato</a>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":5746},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/ad-placeholder.tsx":{"content":"interface AdPlaceholderProps {\n  type: 'horizontal' | 'square';\n  description: string;\n  dimensions: string;\n}\n\nexport default function AdPlaceholder({ type, description, dimensions }: AdPlaceholderProps) {\n  const containerClass = type === 'horizontal' \n    ? \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"\n    : \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\";\n    \n  const placeholderClass = type === 'horizontal'\n    ? \"bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\"\n    : \"bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\";\n\n  return (\n    <div className={containerClass}>\n      <div className={placeholderClass}>\n        <p className=\"text-gray-500 text-sm\">{description}</p>\n        <p className=\"text-gray-400 text-xs mt-1\">{dimensions}</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":838},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/validation/cep-validator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useValidation } from \"@/hooks/use-validation\";\nimport { formatCep } from \"@/lib/validation-utils\";\nimport type { CepValidationResponse } from \"@shared/schema\";\n\ninterface CepValidatorProps {\n  onBack: () => void;\n}\n\nexport default function CepValidator({ onBack }: CepValidatorProps) {\n  const [cep, setCep] = useState(\"\");\n  const [result, setResult] = useState<CepValidationResponse | null>(null);\n  \n  const { validateCep, isLoading } = useValidation({\n    onSuccess: (data: CepValidationResponse) => {\n      setResult(data);\n    },\n  });\n\n  const handleValidate = () => {\n    if (cep.trim()) {\n      validateCep({ cep: cep.trim() });\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    const formatted = formatCep(value);\n    setCep(formatted);\n  };\n\n  return (\n    <section className=\"tool-section\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-white rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-map-marker-alt text-purple-600 text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">Consulta de CEP</h3>\n            <p className=\"text-slate-600\">Encontre endereço completo via API dos Correios</p>\n          </div>\n\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"mb-6\">\n              <Label htmlFor=\"cep-input\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                CEP\n              </Label>\n              <Input\n                id=\"cep-input\"\n                type=\"text\"\n                placeholder=\"00000-000\"\n                value={cep}\n                onChange={(e) => handleInputChange(e.target.value)}\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors\"\n                data-testid=\"input-cep\"\n              />\n            </div>\n            \n            <Button\n              onClick={handleValidate}\n              disabled={isLoading || !cep.trim()}\n              className=\"w-full bg-purple-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-validate-cep\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Consultando...\n                </>\n              ) : (\n                \"Consultar CEP\"\n              )}\n            </Button>\n          </div>\n\n          {/* Result Area */}\n          {result && (\n            <div className=\"mt-8\" data-testid=\"result-cep\">\n              <CardContent className={`result-card p-6 rounded-lg ${result.valid ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`result-icon w-8 h-8 rounded-full flex items-center justify-center ${result.valid ? 'bg-green-500' : 'bg-red-500'}`}>\n                      <i className={`fas ${result.valid ? 'fa-check' : 'fa-times'} text-white text-sm`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-slate-900\" data-testid=\"text-cep-result-title\">\n                        {result.valid ? 'CEP Encontrado' : 'CEP Não Encontrado'}\n                      </h4>\n                      <p className=\"text-sm text-slate-600\">\n                        {result.valid ? 'Endereço localizado' : 'Verifique o número'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"result-details space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">CEP:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-cep-result-number\">{result.formattedCep}</span>\n                  </div>\n                  {result.address && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">Logradouro:</span>\n                        <span className=\"font-medium text-slate-900\" data-testid=\"text-cep-result-street\">{result.address.street}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">Bairro:</span>\n                        <span className=\"font-medium text-slate-900\" data-testid=\"text-cep-result-neighborhood\">{result.address.neighborhood}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">Cidade:</span>\n                        <span className=\"font-medium text-slate-900\" data-testid=\"text-cep-result-city\">{result.address.city}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">UF:</span>\n                        <span className=\"font-medium text-slate-900\" data-testid=\"text-cep-result-state\">{result.address.state}</span>\n                      </div>\n                    </>\n                  )}\n                  <div className=\"mt-3\">\n                    <p className=\"text-sm text-slate-600\" data-testid=\"text-cep-result-message\">{result.message}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <a \n              href=\"/\"\n              className=\"text-slate-600 hover:text-slate-900 transition-colors\"\n              data-testid=\"button-back-to-tools\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>Voltar às Ferramentas\n            </a>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6457},"client/src/components/validation/cpf-cnpj-validator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useValidation } from \"@/hooks/use-validation\";\nimport { formatCpfCnpj } from \"@/lib/validation-utils\";\nimport type { CpfCnpjValidationResponse } from \"@shared/schema\";\n\ninterface CpfCnpjValidatorProps {\n  onBack: () => void;\n}\n\nexport default function CpfCnpjValidator({ onBack }: CpfCnpjValidatorProps) {\n  const [document, setDocument] = useState(\"\");\n  const [result, setResult] = useState<CpfCnpjValidationResponse | null>(null);\n  \n  const { validateCpfCnpj, isLoading } = useValidation({\n    onSuccess: (data: CpfCnpjValidationResponse) => {\n      setResult(data);\n    },\n  });\n\n  const handleValidate = () => {\n    if (document.trim()) {\n      validateCpfCnpj({ document: document.trim() });\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    const formatted = formatCpfCnpj(value);\n    setDocument(formatted);\n  };\n\n  return (\n    <section className=\"tool-section\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-white rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-id-card text-blue-600 text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">Validador de CPF/CNPJ</h3>\n            <p className=\"text-slate-600\">Digite o número para validação com algoritmo oficial</p>\n          </div>\n\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"mb-6\">\n              <Label htmlFor=\"cpf-cnpj-input\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Número do Documento\n              </Label>\n              <Input\n                id=\"cpf-cnpj-input\"\n                type=\"text\"\n                placeholder=\"000.000.000-00 ou 00.000.000/0000-00\"\n                value={document}\n                onChange={(e) => handleInputChange(e.target.value)}\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                data-testid=\"input-cpf-cnpj\"\n              />\n            </div>\n            \n            <Button\n              onClick={handleValidate}\n              disabled={isLoading || !document.trim()}\n              className=\"w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-validate-cpf-cnpj\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Validando...\n                </>\n              ) : (\n                \"Validar Documento\"\n              )}\n            </Button>\n          </div>\n\n          {/* Result Area */}\n          {result && (\n            <div className=\"mt-8\" data-testid=\"result-cpf-cnpj\">\n              <CardContent className={`result-card p-6 rounded-lg ${result.valid ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`result-icon w-8 h-8 rounded-full flex items-center justify-center ${result.valid ? 'bg-green-500' : 'bg-red-500'}`}>\n                      <i className={`fas ${result.valid ? 'fa-check' : 'fa-times'} text-white text-sm`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-slate-900\" data-testid=\"text-result-title\">\n                        {result.valid ? 'Documento Válido' : 'Documento Inválido'}\n                      </h4>\n                      <p className=\"text-sm text-slate-600\" data-testid=\"text-result-type\">{result.type}</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"result-details space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Número:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-result-number\">{result.formattedDocument}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Tipo:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-result-doc-type\">{result.type}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Status:</span>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${result.valid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`} data-testid=\"badge-result-status\">\n                      {result.valid ? 'Válido' : 'Inválido'}\n                    </span>\n                  </div>\n                  <div className=\"mt-3\">\n                    <p className=\"text-sm text-slate-600\" data-testid=\"text-result-message\">{result.message}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <a \n              href=\"/\"\n              className=\"text-slate-600 hover:text-slate-900 transition-colors\"\n              data-testid=\"button-back-to-tools\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>Voltar às Ferramentas\n            </a>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5930},"client/src/components/validation/email-validator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useValidation } from \"@/hooks/use-validation\";\nimport type { EmailValidationResponse } from \"@shared/schema\";\n\ninterface EmailValidatorProps {\n  onBack: () => void;\n}\n\nexport default function EmailValidator({ onBack }: EmailValidatorProps) {\n  const [email, setEmail] = useState(\"\");\n  const [result, setResult] = useState<EmailValidationResponse | null>(null);\n  \n  const { validateEmail, isLoading } = useValidation({\n    onSuccess: (data: EmailValidationResponse) => {\n      setResult(data);\n    },\n  });\n\n  const handleValidate = () => {\n    if (email.trim()) {\n      validateEmail({ email: email.trim() });\n    }\n  };\n\n  const renderCheckBadge = (check: boolean, label: string) => {\n    return (\n      <Badge \n        variant={check ? \"default\" : \"destructive\"}\n        className={`text-xs ${check ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}\n      >\n        {check ? \"✓\" : \"✗\"} {label}\n      </Badge>\n    );\n  };\n\n  return (\n    <section className=\"tool-section\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-white rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-envelope text-orange-600 text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">Validador de Email</h3>\n            <p className=\"text-slate-600\">Validação completa com DNS, MX e detecção de spam</p>\n          </div>\n\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"mb-6\">\n              <Label htmlFor=\"email-input\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Endereço de Email\n              </Label>\n              <Input\n                id=\"email-input\"\n                type=\"email\"\n                placeholder=\"exemplo@dominio.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors\"\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <Button\n              onClick={handleValidate}\n              disabled={isLoading || !email.trim()}\n              className=\"w-full bg-orange-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-orange-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-validate-email\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Validando...\n                </>\n              ) : (\n                \"Validar Email\"\n              )}\n            </Button>\n          </div>\n\n          {/* Result Area */}\n          {result && (\n            <div className=\"mt-8\" data-testid=\"result-email\">\n              <CardContent className={`result-card p-6 rounded-lg ${result.valid ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`result-icon w-8 h-8 rounded-full flex items-center justify-center ${result.valid ? 'bg-green-500' : 'bg-red-500'}`}>\n                      <i className={`fas ${result.valid ? 'fa-check' : 'fa-times'} text-white text-sm`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-slate-900\" data-testid=\"text-email-result-title\">\n                        {result.valid ? 'Email Válido' : 'Email Inválido'}\n                      </h4>\n                      <p className=\"text-sm text-slate-600\">Verificação completa realizada</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"result-details space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Email:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-email-result-address\">{result.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Domínio:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-email-result-domain\">{result.email.split('@')[1]}</span>\n                  </div>\n                  \n                  {/* Validation Checks */}\n                  <div className=\"mt-4\">\n                    <h5 className=\"text-sm font-medium text-slate-700 mb-2\">Verificações:</h5>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {renderCheckBadge(result.checks.syntax, \"Sintaxe\")}\n                      {renderCheckBadge(result.checks.domain, \"Domínio\")}\n                      {renderCheckBadge(result.checks.mx, \"MX Records\")}\n                      {renderCheckBadge(result.checks.smtp, \"SMTP\")}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                      <Badge \n                        variant={result.checks.disposable ? \"destructive\" : \"default\"}\n                        className={`text-xs ${result.checks.disposable ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}\n                      >\n                        {result.checks.disposable ? \"✗\" : \"✓\"} Descartável\n                      </Badge>\n                      <Badge \n                        variant={result.checks.roleBase ? \"destructive\" : \"default\"}\n                        className={`text-xs ${result.checks.roleBase ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}`}\n                      >\n                        {result.checks.roleBase ? \"!\" : \"✓\"} Função\n                      </Badge>\n                    </div>\n                  </div>\n\n                  {result.didYouMean && (\n                    <div className=\"mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded\">\n                      <p className=\"text-sm text-yellow-800\">\n                        <i className=\"fas fa-exclamation-triangle mr-1\"></i>\n                        Você quis dizer: <strong>{result.didYouMean}</strong>?\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-3\">\n                    <p className=\"text-sm text-slate-600\" data-testid=\"text-email-result-message\">{result.message}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <a \n              href=\"/\"\n              className=\"text-slate-600 hover:text-slate-900 transition-colors\"\n              data-testid=\"button-back-to-tools\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>Voltar às Ferramentas\n            </a>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7523},"client/src/components/validation/phone-validator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useValidation } from \"@/hooks/use-validation\";\nimport { formatPhone } from \"@/lib/validation-utils\";\nimport type { PhoneValidationResponse } from \"@shared/schema\";\n\ninterface PhoneValidatorProps {\n  onBack: () => void;\n}\n\nexport default function PhoneValidator({ onBack }: PhoneValidatorProps) {\n  const [phone, setPhone] = useState(\"\");\n  const [phoneType, setPhoneType] = useState<\"br\" | \"international\">(\"br\");\n  const [result, setResult] = useState<PhoneValidationResponse | null>(null);\n  \n  const { validatePhone, isLoading } = useValidation({\n    onSuccess: (data: PhoneValidationResponse) => {\n      setResult(data);\n    },\n  });\n\n  const handleValidate = () => {\n    if (phone.trim()) {\n      validatePhone({ phone: phone.trim(), type: phoneType });\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    if (phoneType === \"br\") {\n      const formatted = formatPhone(value);\n      setPhone(formatted);\n    } else {\n      setPhone(value);\n    }\n  };\n\n  return (\n    <section className=\"tool-section\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"bg-white rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-phone text-green-600 text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-slate-900 mb-2\">Validador de Telefone</h3>\n            <p className=\"text-slate-600\">Valide números brasileiros e internacionais</p>\n          </div>\n\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"mb-4\">\n              <Label htmlFor=\"phone-type\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Tipo de Número\n              </Label>\n              <Select value={phoneType} onValueChange={(value: \"br\" | \"international\") => setPhoneType(value)}>\n                <SelectTrigger className=\"w-full\" data-testid=\"select-phone-type\">\n                  <SelectValue placeholder=\"Selecione o tipo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"br\">Brasileiro</SelectItem>\n                  <SelectItem value=\"international\">Internacional</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"mb-6\">\n              <Label htmlFor=\"phone-input\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Número do Telefone\n              </Label>\n              <Input\n                id=\"phone-input\"\n                type=\"text\"\n                placeholder={phoneType === \"br\" ? \"(11) 99999-9999\" : \"+1 555-123-4567\"}\n                value={phone}\n                onChange={(e) => handleInputChange(e.target.value)}\n                className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors\"\n                data-testid=\"input-phone\"\n              />\n            </div>\n            \n            <Button\n              onClick={handleValidate}\n              disabled={isLoading || !phone.trim()}\n              className=\"w-full bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-validate-phone\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Validando...\n                </>\n              ) : (\n                \"Validar Telefone\"\n              )}\n            </Button>\n          </div>\n\n          {/* Result Area */}\n          {result && (\n            <div className=\"mt-8\" data-testid=\"result-phone\">\n              <CardContent className={`result-card p-6 rounded-lg ${result.valid ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`result-icon w-8 h-8 rounded-full flex items-center justify-center ${result.valid ? 'bg-green-500' : 'bg-red-500'}`}>\n                      <i className={`fas ${result.valid ? 'fa-check' : 'fa-times'} text-white text-sm`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-slate-900\" data-testid=\"text-phone-result-title\">\n                        {result.valid ? 'Número Válido' : 'Número Inválido'}\n                      </h4>\n                      <p className=\"text-sm text-slate-600\" data-testid=\"text-phone-result-carrier\">\n                        {result.carrier || 'Operadora não identificada'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"result-details space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Número:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-phone-result-formatted\">{result.formattedPhone}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Tipo:</span>\n                    <span className=\"font-medium text-slate-900\" data-testid=\"text-phone-result-type\">{result.type}</span>\n                  </div>\n                  {result.areaName && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">DDD:</span>\n                      <span className=\"font-medium text-slate-900\" data-testid=\"text-phone-result-area\">{result.areaName}</span>\n                    </div>\n                  )}\n                  {result.carrier && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">Operadora:</span>\n                      <span className=\"font-medium text-slate-900\" data-testid=\"text-phone-result-operator\">{result.carrier}</span>\n                    </div>\n                  )}\n                  <div className=\"mt-3\">\n                    <p className=\"text-sm text-slate-600\" data-testid=\"text-phone-result-message\">{result.message}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </div>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <a \n              href=\"/\"\n              className=\"text-slate-600 hover:text-slate-900 transition-colors\"\n              data-testid=\"button-back-to-tools\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>Voltar às Ferramentas\n            </a>\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7274},"client/src/components/validation/tool-card.tsx":{"content":"import { Link } from \"wouter\";\n\ninterface ToolCardProps {\n  title: string;\n  description: string;\n  icon: string;\n  bgColor: string;\n  iconColor: string;\n  href: string;\n  'data-testid'?: string;\n}\n\nexport default function ToolCard({ title, description, icon, bgColor, iconColor, href, ...props }: ToolCardProps) {\n  return (\n    <Link href={href}>\n      <div \n        className=\"bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 p-6 cursor-pointer\"\n        {...props}\n      >\n        <div className={`w-12 h-12 ${bgColor} rounded-lg flex items-center justify-center mb-4`}>\n          <i className={`${icon} ${iconColor} text-xl`}></i>\n        </div>\n        <h4 className=\"text-lg font-semibold text-slate-900 mb-2\">{title}</h4>\n        <p className=\"text-slate-600 text-sm\">{description}</p>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":853}},"version":1}